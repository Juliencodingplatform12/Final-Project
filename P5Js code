Hey MR oswlad I tried my best to get a finilized code my code has a few flaws one of the safe circles does not work and I only have 2 I really tried hard on the plannning and really tried my best to code something that showcases my abilities. 


class Zone {
  constructor(x, y, r) {
    this.pos = createVector(x, y);
    this.r = r;
  }
  
  display() {
    noFill();
    stroke(0, 150, 0);
    strokeWeight(2);
    ellipse(this.pos.x, this.pos.y, this.r * 2);
    fill(0, 255, 0, 50);
    noStroke();
    ellipse(this.pos.x, this.pos.y, this.r * 2);
  }
  
  contains(entity) {
    return p5.Vector.dist(this.pos, entity.pos) < this.r;
  }
}

class Rabbit {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.speed = 3.5;
    this.r = 15;
    this.vel = createVector(0, 0);
  }
  
  update() {
    this.vel.set(0, 0);
    if (keyIsDown(LEFT_ARROW)) this.vel.x = -this.speed;
    if (keyIsDown(RIGHT_ARROW)) this.vel.x = this.speed;
    if (keyIsDown(UP_ARROW)) this.vel.y = -this.speed;
    if (keyIsDown(DOWN_ARROW)) this.vel.y = this.speed;
    
    this.pos.add(this.vel);
    
    // Keep inside canvas
    this.pos.x = constrain(this.pos.x, this.r, width - this.r);
    this.pos.y = constrain(this.pos.y, this.r, height - this.r);
  }
  
  display() {
    fill(255, 150, 150);
    stroke(150, 0, 0);
    strokeWeight(2);
    ellipse(this.pos.x, this.pos.y, this.r * 2);
    // Rabbit eyes
    fill(255);
    ellipse(this.pos.x - 5, this.pos.y - 5, 5, 5);
    ellipse(this.pos.x + 5, this.pos.y - 5, 5, 5);
    fill(0);
    ellipse(this.pos.x - 5, this.pos.y - 5, 2, 2);
    ellipse(this.pos.x + 5, this.pos.y - 5, 2, 2);
  }
}

class Fox {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.vel = p5.Vector.random2D();
    this.acc = createVector();
    this.maxSpeed = 2.5;
    this.maxForce = 0.1;
    this.r = 20;
  }
  
  applyForce(force) {
    this.acc.add(force);
  }
  
  seek(target) {
    let desired = p5.Vector.sub(target, this.pos);
    let d = desired.mag();
    
    desired.setMag(this.maxSpeed);
    if (d < 100) {
      // Slow down as fox nears rabbit
      let m = map(d, 0, 100, 0, this.maxSpeed);
      desired.setMag(m);
    }
    
    let steer = p5.Vector.sub(desired, this.vel);
    steer.limit(this.maxForce);
    this.applyForce(steer);
  }
  
  update() {
    this.vel.add(this.acc);
    this.vel.limit(this.maxSpeed);
    this.pos.add(this.vel);
    this.acc.mult(0);
    
    // Keep inside canvas
    this.pos.x = constrain(this.pos.x, this.r, width - this.r);
    this.pos.y = constrain(this.pos.y, this.r, height - this.r);
  }
  
  display() {
    fill(255, 100, 50);
    stroke(150, 60, 0);
    strokeWeight(2);
    ellipse(this.pos.x, this.pos.y, this.r * 2);
    // Fox eyes
    fill(0);
    ellipse(this.pos.x - 6, this.pos.y - 6, 5, 5);
    ellipse(this.pos.x + 6, this.pos.y - 6, 5, 5);
  }
  
  hits(rabbit) {
    let d = p5.Vector.dist(this.pos, rabbit.pos);
    return d < this.r + rabbit.r;
  }
}

// --- Global Variables ---
let rabbit;
let foxes = [];
let zones = [];
let gameOver = false;
let score = 0;
let startTime;

function setup() {
  createCanvas(800, 600);
  rabbit = new Rabbit(width / 2, height / 2);
  
  // Create 5 foxes randomly placed
  for (let i = 0; i < 5; i++) {
    let x = random(width);
    let y = random(height);
    foxes.push(new Fox(x, y));
  }
  
  // Create 3 hiding zones
  
  zones.push(new Zone(700, 500, 80));
  zones.push(new Zone(400, 300, 50));
  
  gameOver = false;
  score = 0;
  startTime = millis();
}

function draw() {
  background(220, 230, 200);
  
  // Draw zones
  for (let zone of zones) {
    zone.display();
  }
  
  if (!gameOver) {
    rabbit.update();
    rabbit.display();
  
    let rabbitInZone = zones.some(zone => zone.contains(rabbit));
  
    for (let fox of foxes) {
      if (!rabbitInZone) {
        fox.seek(rabbit.pos);
      }
      fox.update();
      fox.display();
      
      if (fox.hits(rabbit)) {
        gameOver = true;
      }
    }
  
    // Update and display score (time survived)
    score = floor((millis() - startTime) / 1000);
    fill(0);
    textSize(24);
    text(`Time Survived: ${score} seconds`, 10, 30);
    
    // Instructions
    textSize(14);
    text("Use arrow keys to move the rabbit (pink).", 10, height - 40);
    text("Reach the green zones to hide safely from foxes.", 10, height - 20);
  } else {
    // Game over screen
    fill(0);
    textAlign(CENTER, CENTER);
    textSize(48);
    text("Game Over!", width / 2, height / 2 - 40);
    textSize(32);
    text(`You survived for ${score} seconds.`, width / 2, height / 2 + 10);
    textSize(20);
    text("Press ENTER to restart.", width / 2, height / 2 + 50);
  }
}

function keyPressed() {
  if (gameOver && keyCode === ENTER) {
    // Restart the game
    foxes = [];
    for (let i = 0; i < 5; i++) {
      let x = random(width);
      let y = random(height);
      foxes.push(new Fox(x, y));
    }
    rabbit.pos = createVector(width / 2, height / 2);
    gameOver = false;
    score = 0;
    startTime = millis();
  }
}
